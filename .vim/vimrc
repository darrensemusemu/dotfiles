
"""
""" BASIC
"""

"
" various settings
set autoindent                  " Minimal automatic indenting for any filetype.
set backspace=indent,eol,start  " Intuitive backspace behavior.
set background=dark
set hidden                      " Possibility to have more than one unsaved buffers.
set incsearch                   " Incremental search, hit `<CR>` to stop.
set hlsearch			              " highlight search results
set laststatus=2
set number relativenumber
set nocompatible                " Say NO to vi!!!

" set termguicolors
set regexpengine=0              " Set to automatic. Helps with costly syntac highlighting (especially typescrpt).
set ruler                       " Shows the current line number at the bottom-right of the screen.
set noshowmode
set path+=**                    " Search down into sub folder. Provies tab completion for file related tasks. :find & :b
set wildmenu                    " Great command-line completion, use `<Tab>` to move around and `<CR>` to validate.
                                " documented in: ins-completion

"
" leader
nnoremap <SPACE> <Nop>
let mapleader=" " " Leader Key


"
" tabs
nnoremap <leader>td :tabclose <Cr>
nnoremap <leader>te :tabedit %<Cr>
nnoremap <leader>tn :tabnew <Cr>


"
" terminal
nnoremap <leader>xs :terminal ++rows=16 <Cr>
nnoremap <leader>xv :vertical terminal <Cr>
" <Esc> exit terminal mode with
tnoremap <Esc> <C-W>N


"
" snippets
runtime snippets/snippets.vim " quick sninpets
runtime macros/matchit.vim " `matchit.vim` is built-in so let's enable it! & Hit `%` on `if` to jump to `else`.


"
" tags
" Create 'tags' file (may need to install ctags first)
" Enables:
" - Use ^] to jump to tag under cursor
" - Use g^] for ambious tags
" - Use ^t to jump back up the tag stack
command! MakeTags !ctags -R .
filetype plugin indent on " Enabling filetype support provides filetype-specific indenting,
syntax on                 " syntax highlighting, omni-completion and other useful settings.


"
" colorscheme
packadd! onedark.vim " TODO: remove
colorscheme sunbather    " others: monochrome, onedark
hi Normal ctermbg=none guibg=NONE " transaparent background color
hi Terminal ctermbg=none guibg=NONE " transaparent background color


"
" file browsing
let g:netrw_banner=0        " disable annoying banner
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'
let g:netrw_winsize = 30


"""
""" PLUGS
"""

"
" ale
let g:ale_completion_enabled = 1
let g:ale_fix_on_save = 1
let g:ale_floating_preview = 1
set omnifunc=ale#completion#OmniFunc

nnoremap <silent> <leader>k <Plug>(ale_previous_wrap)
nnoremap <silent> <leader>j <Plug>(ale_next_wrap)
nnoremap <silent> <leader>i <Plug>(ale_hover)
nnoremap <silent> <leader>e <Plug>(ale_detail)
nnoremap <silent> <leader>[ <Plug>(ale_go_to_definition)
nnoremap <silent> <leader>] <Plug>(ale_find_references)
nnoremap <silent> <leader>. <Plug>(ale_import)
:
if has('nvim')
  let g:ale_use_neovim_diagnostics_api = 1
endif

let g:ale_fixers = {
\   '*': ['trim_whitespace'],
\   'c': ["clang-format"],
\   'cs': ["dotnet-format"],
\   'go': ["goimports"],
\   'md': ["cspell"],
\   'rust': ["rustfmt"],
\}

let g:ale_linters = {
\ 'cs': ['OmniSharp'],
\ 'rust': ['analyzer']
\}


"
" OmniSharp
let g:OmniSharp_server_path = 'omniSharp'

nnoremap <leader>c# :OmniSharp


"
" Ready. Set. Go
packloadall | helptags ALL


" File type detection
" augroup project
"   autocmd!
"   autocmd BufRead,BufNewFile *.h,*.c set filetype=c " Detect *.h as c files
" augroup END
